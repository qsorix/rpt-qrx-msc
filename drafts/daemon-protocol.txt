Notacja @{param} służy do podstawiania zmiennych

file - przesyla plik
check, setup, cleanup i schedule przesyłają komendy.

Test ma taki przebieg:
1. kontroler sie laczy, wysyla caly blok test ... end
2. Kontroler kaze wykonac komendy check
3. jesli ktoras z komend check zwroci niezerowy status test jest przerywany
4. kontroler wysyla godzine rozpoczecia i sie rozlacza
5. daemon wykonuje setup, schedule i cleanup
6. kontroler laczy sie i odbiera wyniki

W czasie check polaczenie moze byc aktywne. W czasie setup juz nie, dlatego sa
osobno.

check, setup i cleanup to po prostu komendy, do wykonania jedna po drugiej.

schedule ma dodatkowo okreslony sposob wykonywania komend (np. w ktorej
sekundzie)

Jesli w czasie setup cos pojdzie nie tak, setup jest przerywany a schedule nie
zostanie wykonany

cleanup wykonywany jest zawsze. wszystkie komendy z cleanup, niezaleznie od
tego, czy sie powiodly, czy nie (bo jak setup zostal przerwany, to potem
cleanup moze nie dzialac, ale nie wiadomo, kiedy sie setup przerwal)

test @{id=<name>}
	file @{id=<name>} @{size=<size>}
	  -- <size> bytes of content follows --
	check @{id=<name>} <command>
	setup @{id=<name>} <command>
	cleanup @{id=<name>} <command>
	schedule @{id=<name>} @{run=<start>} <command>
end

results @{name=<name>}, wysyłany jest rozmiar, a potem output
	task @{name=<name>}
        cmd @{name=<name>}
        file @{name=<name>}
end



